CREATE TABLE SOTRUD
(InnS INTEGER NOT NULL PRIMARY KEY,
N_M INTEGER,

Fam VARCHAR2(200),
Im VARCHAR2(200),
Otch VARCHAR2(200),
Dol VARCHAR2(200),
Zp INTEGER,

FOREIGN KEY (N_M) REFERENCES KRUG(N_M));
----------------------------ГОТОВА
INSERT INTO SOTRUD VALUES(1120,NULL,'Бондарева','Ольга','Петрововна','Старший воспитатель',9000);
INSERT INTO SOTRUD VALUES(1121,NULL,'Никонова','Виктория','Петрововна','Старший воспитатель',9000);
INSERT INTO SOTRUD VALUES(1122,NULL,'Зотова','Валеря','Сергеевна','Воспитатель',8000);
INSERT INTO SOTRUD VALUES(1123,120,'Федорова','Нина','Петрововна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1124,121,'Смирнова','Анна','Ивановна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1125,122,'Титова','Яна','Вячиславовна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1126,123,'Паршикова','Татьяна','Васильевна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1127,124,'Романова','Лина','Алексеевна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1128,125,'Каменева','Марина','Евгеньевна','Кружковод',7000);
INSERT INTO SOTRUD VALUES(1129,NULL,'Евдакимова','Елена','Сергеевна','Воспитатель',8000);
INSERT INTO SOTRUD VALUES(1130,NULL,'Стрельцова','Александра','Ивановна','Воспитатель',8000);
--НАПОЛНЕНА
SELECT * FROM SOTRUD;

CREATE TABLE STAGOR
(InnS INTEGER NOT NULL PRIMARY KEY,
N_M INTEGER,

Fam VARCHAR2(200),
Im VARCHAR2(200),
Otch VARCHAR2(200),
Dol VARCHAR2(200),
Zp INTEGER,

FOREIGN KEY (N_M) REFERENCES KRUG(N_M));

CREATE TABLE KRUG
(N_M INTEGER NOT NULL PRIMARY KEY,

Nazv VARCHAR2(200),
KolM INTEGER,
CENA INTEGER);
-----------------------------ГОТОВА
INSERT INTO KRUG VALUES(120,'Аэробика',10,2200);
INSERT INTO KRUG VALUES(121,'Логопед',10,1500);
INSERT INTO KRUG VALUES(122,'Изостудия',10,1500);
INSERT INTO KRUG VALUES(123,'Театр',20,1200);
INSERT INTO KRUG VALUES(124,'Бассейн',10,2300);
INSERT INTO KRUG VALUES(125,'Танцы',15,2000);
INSERT INTO KRUG VALUES(126,'Хор',10, 1200);
--НАПОЛНЕНА
DROP TABLE REB_S;

SELECT * FROM grup;
SELECT * FROM krug;

CREATE TABLE REB_S
(InnR INTEGER NOT NULL PRIMARY KEY,
N_M INTEGER,
N INTEGER,

Fam VARCHAR2(200),
Im VARCHAR2(200),
Otch VARCHAR2(200),
VOZR INTEGER,
FOREIGN KEY(N_M) REFERENCES KRUG(N_M),
FOREIGN KEY(N) REFERENCES GRUP(N));
------------------------------ГОТОВА
INSERT INTO REB_S VALUES(110,125,10,'Иванов','Олег','Петрович',3);
INSERT INTO REB_S VALUES(111,125,10,'Сидорова','Екатерина','Артемовна',3);
INSERT INTO REB_S VALUES(112,122,10,'Петров','Максим','Васильевич',3);
INSERT INTO REB_S VALUES(113,123,10,'Розова','Кристина','Константиновна',3);
INSERT INTO REB_S VALUES(114,121,10,'Тищенко','Кира','Александровна',3);
INSERT INTO REB_S VALUES(115,121,10,'Геер','Евгений','Иванович',3);
INSERT INTO REB_S VALUES(116,123,10,'Кочетов','Никита','Андреевич',3);
INSERT INTO REB_S VALUES(117,122,10,'Арькова','Виктория','Алексеевна',4);
INSERT INTO REB_S VALUES(118,125,10,'Козлова','Анна','Максимовна',4);
INSERT INTO REB_S VALUES(119,125,10,'Родин','Андрей','Юрьевич',4);
INSERT INTO REB_S VALUES(120,123,10,'Усова','Кристина','Кузьминична',3);

INSERT INTO REB_S VALUES(121,120,11,'Белова','Виктория','Романовна',5);
INSERT INTO REB_S VALUES(122,123,11,'Каргин','Андрей','Викторович',5);
INSERT INTO REB_S VALUES(123,123,11,'Попов','Анатолий','Юрьевич',6);
INSERT INTO REB_S VALUES(124,125,11,'Савельева','Евгения','Юрьевна',5);
INSERT INTO REB_S VALUES(125,122,11,'Кабакова','Александра','Святославовна',6);
INSERT INTO REB_S VALUES(126,120,11,'Голубев','Вадим','Сергеевич',6);
INSERT INTO REB_S VALUES(127,125,11,'Никулин','Илья','Борисович',6);
INSERT INTO REB_S VALUES(128,124,11,'Филатов','Александр','Александрович',5);
INSERT INTO REB_S VALUES(129,124,11,'Юдина','Юлия','Петрововна',5);
INSERT INTO REB_S VALUES(130,120,11,'Блонина','Ольга','Петрововна',5);
INSERT INTO REB_S VALUES(131,125,11,'Понкратова','Альбина','Сергеевна',5);
INSERT INTO REB_S VALUES(132,121,11,'Коробов','Станислав','Владимирович',6);
INSERT INTO REB_S VALUES(133,121,11,'Тарасова','Анастасия','Викторовна',6);
INSERT INTO REB_S VALUES(134,122,11,'Букин','Егор','Петрович',5);
INSERT INTO REB_S VALUES(135,122,11,'Красноглазов','Никита','Борисович',5);

INSERT INTO REB_S VALUES(136,125,12,'Агеева','Виктория','Денисовна',7);
INSERT INTO REB_S VALUES(137,123,12,'Канаев','Анатолий','Васильевич',7);
INSERT INTO REB_S VALUES(138,124,12,'Захаров','Петр','Николаевич',7);
INSERT INTO REB_S VALUES(139,123,12,'Федоров','Никита', 'Петрович',7);
INSERT INTO REB_S VALUES(140,123,12,'Андронова','Анна','Дмитриевна',7);
INSERT INTO REB_S VALUES(141,120,12,'Филиппова','Вера','Максимовна',7);
INSERT INTO REB_S VALUES(142,125,12,'Астахова','Ирина','Валерьевна',7);
INSERT INTO REB_S VALUES(143,120,12,'Чукарина','Ксения','Аркадьевна',7);
INSERT INTO REB_S VALUES(144,124,12,'Беланова','Марина','Сергеевна',7);
INSERT INTO REB_S VALUES(145,120,12,'Бондарев','Евгений','Кузьмич',7);
INSERT INTO REB_S VALUES(146,125,12,'Чубенко','Анатолий','Анатольевич',7);
INSERT INTO REB_S VALUES(147,123,12,'Яншин','Владислав','Михайлович',7);
INSERT INTO REB_S VALUES(148,123,12,'Морозова','Анастасия','Егоровна',7);
INSERT INTO REB_S VALUES(149,122,12,'Бунин','Борис','Петрович',7);
INSERT INTO REB_S VALUES(150,122,12,'Котенко','Антон','Евгеньевич',7);
INSERT INTO REB_S VALUES(151,124,12,'Кошкин','Артем','Борисович',7);
INSERT INTO REB_S VALUES(152,123,12,'Нерух','Генадий','Петрович',7);
INSERT INTO REB_S VALUES(153,125,12,'Штефанко','Юлия','Максимовна',7);
--НАПОЛНЕНА

CREATE TABLE GRUP
(N INTEGER NOT NULL PRIMARY KEY,

Nazv VARCHAR2(200),
Vozr_C INTEGER,
Vozr_DO INTEGER,
KolM INTEGER);
-----------------------------ГОТОВА
INSERT INTO GRUP VALUES(10,'Младшая',3,4,20);
INSERT INTO GRUP VALUES(11,'Средняя',5,6,30);
INSERT INTO GRUP VALUES(12,'Старшая',7,7,30);
--НАПОЛНЕНА

SELECT * FROM DEN_NED;
CREATE TABLE DEN_NED
(ND INTEGER NOT NULL PRIMARY KEY,
Nazv VARCHAR2(200));
------------------------------ГОТОВА
INSERT INTO DEN_NED VALUES(1,'Понедельник');
INSERT INTO DEN_NED VALUES(2,'Вторник');
INSERT INTO DEN_NED VALUES(3,'Среда');
INSERT INTO DEN_NED VALUES(4,'Четверг');
INSERT INTO DEN_NED VALUES(5,'Пятница');
INSERT INTO DEN_NED VALUES(6,'Суббота');
--НАПОЛНЕНА

SELECT* FROM TIME_Z;

CREATE TABLE TIME_Z
(NT INTEGER NOT NULL PRIMARY KEY,

VrN VARCHAR2(200),
VrK VARCHAR2(200));
------------------------------ГОТОВА
INSERT INTO TIME_Z VALUES(1,'09:00','10:30');
INSERT INTO TIME_Z VALUES(2,'10:45','11:15');
INSERT INTO TIME_Z VALUES(3,'12:45','14:15');
INSERT INTO TIME_Z VALUES(4,'14:30','16:00');
INSERT INTO TIME_Z VALUES(5,'16:15','17:45');
--НАПОЛНЕНА

SELECT * FROM RASP;

CREATE TABLE RASP
(ND INTEGER,
N_M INTEGER,
NT INTEGER,
FOREIGN KEY (ND) REFERENCES DEN_NED(ND),
FOREIGN KEY (N_M) REFERENCES KRUG(N_M),
FOREIGN KEY (NT) REFERENCES TIME_Z(NT));
------------------------------ГОТОВА
INSERT INTO RASP VALUES(1,120,1);
INSERT INTO RASP VALUES(1,124,3);
INSERT INTO RASP VALUES(2,120,2);
INSERT INTO RASP VALUES(3,121,1);
INSERT INTO RASP VALUES(3,124,3);
INSERT INTO RASP VALUES(3,125,4);
INSERT INTO RASP VALUES(3,123,5);
INSERT INTO RASP VALUES(5,121,1);
INSERT INTO RASP VALUES(5,123,2);
INSERT INTO RASP VALUES(5,124,3);
INSERT INTO RASP VALUES(6,122,1);
INSERT INTO RASP VALUES(6,122,2);
INSERT INTO RASP VALUES(6,122,3);
INSERT INTO RASP VALUES(6,122,4);
INSERT INTO RASP VALUES(6,122,5);
--НАПОЛНЕНА

SELECT * FROM LGOTA;

CREATE TABLE LGOTA
(NL INTEGER NOT NULL PRIMARY KEY,

Nazv VARCHAR2(200),
Procent INTEGER);
-------------------------------ГОТОВА
INSERT INTO LGOTA VALUES(111,'Многодетная семья',50);
INSERT INTO LGOTA VALUES(112,'При сколиозе',40);
INSERT INTO LGOTA VALUES(113,'Картавость',20);
INSERT INTO LGOTA VALUES(114,'Театр малышам',30);
--НАПОЛНЕНА

SELECT * FROM lgota_reb;

CREATE TABLE LGOTA_REB
(InnR INTEGER NOT NULL,
NL INTEGER NOT NULL,
FOREIGN KEY (InnR) REFERENCES REB_S(InnR),
FOREIGN KEY (NL) REFERENCES LGOTA(NL));
-------------------------------ГОТОВА
INSERT INTO LGOTA_REB VALUES(114,113);
INSERT INTO LGOTA_REB VALUES(132,113);
INSERT INTO LGOTA_REB VALUES(129,112);
INSERT INTO LGOTA_REB VALUES(138,112);
INSERT INTO LGOTA_REB VALUES(144,112);
INSERT INTO LGOTA_REB VALUES(113,114);
INSERT INTO LGOTA_REB VALUES(116,114);
INSERT INTO LGOTA_REB VALUES(120,114);
INSERT INTO LGOTA_REB VALUES(127,111);
INSERT INTO LGOTA_REB VALUES(123,111);
INSERT INTO LGOTA_REB VALUES(140,111);
INSERT INTO LGOTA_REB VALUES(143,111);
INSERT INTO LGOTA_REB VALUES(150,111);
--НАПОЛНЕНА

SELECT * FROM krug_grup;
select * from krug;

CREATE TABLE KRUG_GRUP
(N_M INTEGER,
N INTEGER NOT NULL,
FOREIGN KEY (N_M) REFERENCES KRUG(N_M),
FOREIGN KEY (N) REFERENCES GRUP(N));
--------------------------------ГОТОВА
INSERT INTO KRUG_GRUP VALUES(120,11);
INSERT INTO KRUG_GRUP VALUES(121,10);
INSERT INTO KRUG_GRUP VALUES(122,10);
INSERT INTO KRUG_GRUP VALUES(123,10);
INSERT INTO KRUG_GRUP VALUES(124,11);
INSERT INTO KRUG_GRUP VALUES(125,10);
INSERT INTO KRUG_GRUP VALUES(126,10);
--НАПОЛНЕНА

SELECT * FROM inf_razm;

CREATE TABLE INF_RAZM
(InnSR INTEGER NOT NULL PRIMARY KEY,
N_M INTEGER,

Fam VARCHAR2(200),
Im VARCHAR2(200),
Otch VARCHAR2(200),
Dol VARCHAR2(200),
Zp INTEGER,
Obr VARCHAR2(200),
Stagh INTEGER,
FOREIGN KEY(N_M) REFERENCES KRUG(N_M));
-----------------------------------ГОТОВА
INSERT INTO INF_RAZM VALUES(1132,126,'Пяточкина','Кристина','Семеновна','Кружковод',9000,'Высшее',4);
INSERT INTO INF_RAZM VALUES(1133,126,'Сиддикова','Виктория','Максимовна','Кружковод',9000,'Высшее',1);
--НАПОЛНЕНА


SET SERVEROUTPUT ON
------------------------------------------РАБОТА С СОТРУДНИКАМИ

--процедура, позволяющая нанять СТАЖЕРА, проверить его образование и стаж
CREATE OR REPLACE PROCEDURE PRIEM(InnS INTEGER,N_M INTEGER, FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2, DOL VARCHAR2, ZP INTEGER, OBR VARCHAR2, STAGH VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM SOTRUD, STAGOR
WHERE SOTRUD.InnS=PRIEM.InnS OR STAGOR.InnS=PRIEM.InnS;
IF PER1>0
THEN dbms_output.put_line ('Сотрудник имеется в базе');
ELSE IF (UPPER(PRIEM.OBR) = UPPER('ВЫСШЕЕ') OR UPPER(PRIEM.OBR) = UPPER('СРЕДНЕЕ')) AND PRIEM.STAGH>=3 
THEN INSERT INTO STAGOR VALUES(InnS, N_M, FAM, IM, OTCH, DOL, ZP);
ELSE dbms_output.put_line('Образование или стаж не соответствуют требованиям');
END IF;
END IF;
END;
EXEC PRIEM(1131,NULL, 'Аксенова', 'Анна', 'Егоровна', 'Воспитатель', 9000, 'ВЫЕЕ',4);

select * FROM SOTRUD;
--ПРОЦЕДУРА, ПОЗВОЛЯЮЩАЯ УВОЛИТЬ СОТРУДНИКА
CREATE OR REPLACE PROCEDURE UVOLN(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM SOTRUD
WHERE UPPER(FAM)=UPPER(UVOLN.FAM) AND UPPER(IM)=UPPER(UVOLN.IM) AND UPPER(OTCH)=UPPER(UVOLN.OTCH);
IF PER1<1 
THEN dbms_output.put_line ('Выбранного вами сотрудника нет в базе или данные введены некорректно');
ELSE DELETE FROM SOTRUD WHERE UPPER(FAM)=UPPER(UVOLN.FAM) AND UPPER(IM)=UPPER(UVOLN.IM) AND UPPER(OTCH)=UPPER(UVOLN.OTCH);
END IF;
END;
EXEC UVOLN('Федорова', 'Нина','Петрововна');
select *from sotrud;
select * from stagor;
 

-- увольнение сотрудника и замена его стажером (рабочий)
CREATE OR REPLACE TRIGGER RBD_SOTRUD
BEFORE DELETE ON SOTRUD
FOR EACH ROW
BEGIN
INSERT INTO INF_SOTR VALUES(USER,SYSDATE,'Увольнение сотрудника',:OLD.INNS,
:OLD.N_M,:OLD.FAM,:OLD.IM,:OLD.OTCH,:OLD.DOL,:OLD.ZP);

INSERT INTO STAGOR VALUES((SELECT MIN(INNSR) FROM INF_RAZM WHERE (UPPER(OBR)=UPPER('ВЫСШЕЕ') OR UPPER(OBR)=UPPER('СРЕДНЕЕ')) AND STAGH>=3),:OLD.N_M,
(SELECT FAM FROM INF_RAZM WHERE INNSR=(SELECT MIN(INNSR) FROM INF_RAZM WHERE (UPPER(OBR)=UPPER('ВЫСШЕЕ') OR UPPER(OBR)=UPPER('СРЕДНЕЕ')) AND STAGH>=3)),
(SELECT IM FROM INF_RAZM WHERE INNSR=(SELECT MIN(INNSR) FROM INF_RAZM WHERE (UPPER(OBR)=UPPER('ВЫСШЕЕ') OR UPPER(OBR)=UPPER('СРЕДНЕЕ')) AND STAGH>=3)),
(SELECT OTCH FROM INF_RAZM WHERE INNSR=(SELECT MIN(INNSR) FROM INF_RAZM WHERE (UPPER(OBR)=UPPER('ВЫСШЕЕ') OR UPPER(OBR)=UPPER('СРЕДНЕЕ')) AND STAGH>=3)),:OLD.DOL,:OLD.ZP-2000);

DELETE FROM INF_RAZM WHERE INNSR=(SELECT MIN(INNSR) FROM INF_RAZM WHERE (UPPER(OBR)=UPPER('ВЫСШЕЕ') OR UPPER(OBR)=UPPER('СРЕДНЕЕ')) AND STAGH>=3);
END RBD_SOTRUD;

select* from Stagor;
select* from SOTRUD;
--перевод стажера на официальную работу
CREATE OR REPLACE PROCEDURE ST_PR(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM STAGOR
WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH);
IF PER1<1 
THEN dbms_output.put_line ('Стажера с введенным вами данными нет в базе или данные введены некорректно');
ELSE 
INSERT INTO SOTRUD VALUES((SELECT INNS FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
(SELECT N_M FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
ST_PR.FAM, ST_PR.IM,ST_PR.OTCH,
(SELECT DOL FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
(SELECT ZP+2000 FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)));

DELETE FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH);
END IF;
END;
EXEC ST_PR('Пяточкина', 'Кристина','Семеновна');

--ТРИГГЕР ВНОС ИНФЫ О ПРИЕМЕ СТАЖЕРА НА ОФ РАБОТУ
CREATE OR REPLACE TRIGGER RBI_SOTRUD
BEFORE INSERT ON SOTRUD
FOR EACH ROW
BEGIN
INSERT INTO INF_SOTR VALUES(USER,SYSDATE,'Повышение стажера',:NEW.INNS,
:NEW.N_M,:NEW.FAM,:NEW.IM,:NEW.OTCH,:NEW.DOL,:NEW.ZP);
END RBD_SOTRUD;

--ТРИГГЕР ВНОС ИНФЫ О ПРИЕМЕ НА СТАЖЕРОВКУ
CREATE OR REPLACE TRIGGER RBI_STAGOR
BEFORE INSERT ON STAGOR
FOR EACH ROW
BEGIN
INSERT INTO INF_SOTR VALUES(USER,SYSDATE,'Прием стажера',:NEW.INNS,
:NEW.N_M,:NEW.FAM,:NEW.IM,:NEW.OTCH,:NEW.DOL,:NEW.ZP);
END RBD_STAGOR;

select * from krug_grup;

----------------------ТАБЛИЦА АУДИТ
 CREATE TABLE INF_SOTR
 (ID_C VARCHAR2(200),
 DATEBEG DATE,
 NAMES VARCHAR2(200),
 INNS INTEGER,
 N_M INTEGER,
 FAM VARCHAR2(200),
 IM VARCHAR2(200),
 OTCH VARCHAR2(200),
 DOL VARCHAR2(200),
 ZP INTEGER);

 SELECT * FROM INF_SOTR;
 SELECT * FROM INF_REB;
DELETE FROM REB_S WHERE INNR=154;
 ------------------------------------РАБОТА С РЕБЕНКОМ--------------
 
 select * from reb_s;
 ----ПРОЦЕДУРА РЕГИСТРАЦИИ РЕБЕНКА
CREATE OR REPLACE PROCEDURE REG_REB(InnR INTEGER, FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2, VOZR INTEGER)
IS
PER1 INTEGER;
PER2 INTEGER;
N_GR INTEGER;

BEGIN
SELECT COUNT(*) INTO PER1
FROM REB_S
WHERE InnR=REG_REB.InnR;

SELECT (V1.KOLM-V2.ZAN) INTO PER2
FROM (SELECT KOLM
FROM GRUP
WHERE N=(SELECT N 
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO))V1,
(SELECT COUNT(*) ZAN
FROM REB_S
WHERE N=(SELECT N 
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO))V2;

SELECT N INTO N_GR
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO;

IF PER1>0
THEN dbms_output.put_line ('Ребенок имеется в базе');
ELSE IF (PER2<=0) 
THEN dbms_output.put_line ('К сожалению в вашей возростной группе больше нет мест');
ELSE INSERT INTO REB_S VALUES(REG_REB.InnR, NULL,N_GR, REG_REB.FAM, REG_REB.IM, REG_REB.OTCH, REG_REB.VOZR);
END IF;
END IF;
END;
EXEC REG_REB(155, 'Петров', 'Виктор', 'Иванович', 5);
EXEC REG_REB(156, 'Петрова', 'Ольга', 'Викторовна', 3);

--------------------ТАБЛИЦА АУДИТ
 CREATE TABLE INF_REB
 (ID_C VARCHAR2(200),
 DATEBEG DATE,
 NAMES VARCHAR2(200),
 INNR INTEGER,
 N_GR INTEGER,
 N_M INTEGER,
 FAM VARCHAR2(200),
 IM VARCHAR2(200),
 OTCH VARCHAR2(200),
 VOZR INTEGER);

-------------------ТРИГГЕР ВНОС ИНФЫ О РЕГИСТРАЦИИ РЕБЕНКА
CREATE OR REPLACE TRIGGER RBI_REB_S
BEFORE INSERT ON REB_S
FOR EACH ROW
BEGIN
INSERT INTO INF_REB VALUES(USER,SYSDATE,'Регистрация ребенка',:NEW.INNR,
:NEW.N,NULL,:NEW.FAM,:NEW.IM,:NEW.OTCH,:NEW.VOZR);
END RBI_REB_S;

------------------ПРОЦЕДУРА ЗАПИСЬ В КРУЖОК
CREATE OR REPLACE PROCEDURE REG_REB_KRUG(FAM VARCHAR2,IM VARCHAR2, KRUG VARCHAR2)
IS
PER1 INTEGER;
PER2 INTEGER;
PER3 INTEGER;

BEGIN
SELECT (V1.KOLM-V2.ZAN) INTO PER1
FROM (SELECT KOLM
FROM KRUG
WHERE N_M=(SELECT N_M 
FROM KRUG
WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)))V1,
(SELECT COUNT(*) ZAN
FROM REB_S
WHERE N_M=(SELECT N_M 
FROM KRUG
WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)))V2;

SELECT N_M INTO PER2
FROM REB_S
WHERE UPPER(FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(IM)=UPPER(REG_REB_KRUG.IM);

SELECT COUNT(*) INTO PER3
FROM REB_S, KRUG_GRUP
WHERE UPPER(REB_S.FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(REB_S.IM)=UPPER(REG_REB_KRUG.IM) AND REB_S.N>=(SELECT N FROM KRUG_GRUP WHERE N_M=(SELECT N_M
                                                    FROM KRUG
                                                    WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)));

IF (PER2 IS NOT NULL)
THEN dbms_output.put_line ('Ребенок записан на какой-то кружок выпишите и продолжите');
ELSE IF (PER1<=0) 
THEN dbms_output.put_line ('К сожалению в кружке больше нет мест');
ELSE IF(PER3<=0)
THEN dbms_output.put_line ('Возрастная группа кружка не подходит ребенку');
ELSE UPDATE REB_S SET N_M = (SELECT N_M FROM KRUG WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)) WHERE UPPER(REB_S.FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(REB_S.IM)=UPPER(REG_REB_KRUG.IM); 
END IF;
END IF;
END IF;
END;
EXEC REG_REB_KRUG('Петров','Виктор', 'Хор');
EXEC REG_REB_KRUG('Петрова','Ольга', 'Аэробика');
select * from krug_grup;
select * from krug;
select * from reb_s;

-----------------ТРИГГЕР ВНОС ИНФЫ О ЗАПИСИ РЕБЕНКА НА КРУЖОК
CREATE OR REPLACE TRIGGER RBU_REB_S
BEFORE UPDATE OF N_M ON REB_S
FOR EACH ROW
BEGIN
INSERT INTO INF_REB VALUES(USER,SYSDATE,'Изменение кружка',:OLD.INNR,
:OLD.N, :NEW.N_M,:OLD.FAM,:OLD.IM,:OLD.OTCH,:OLD.VOZR);
END RBU_REB_S;

-----------------ПРОЦЕДУРА ВЫПИСАТЬ РЕБЕНКА ИЗ КРУЖКА
CREATE OR REPLACE PROCEDURE UBR_KR(FAM VARCHAR2,IM VARCHAR2)
IS
PER1 INTEGER;

BEGIN
SELECT N_M INTO PER1
FROM REB_S
WHERE UPPER(FAM)=UPPER(UBR_KR.FAM) AND UPPER(IM)=UPPER(UBR_KR.IM);


IF (PER1 IS NULL)
THEN dbms_output.put_line ('Ребенок не записан ни на один кружок');
ELSE UPDATE REB_S SET N_M = NULL WHERE UPPER(FAM)=UPPER(UBR_KR.FAM) AND UPPER(IM)=UPPER(UBR_KR.IM); 
END IF;
END;
EXEC UBR_KR('Петров','Виктор');

select * FROM LGOTA;
select * FROM LGOTA_REB;
SELECT * FROM KRUG;

---------------СФОРМИРОВАТЬ СПИСОК ЕЖЕМЕСЯЧНОЙ ОПЛАТЫ С УЧЕТОМ ЛЬГОТ
CREATE OR REPLACE PROCEDURE OPL
IS
PER1 TAB_V%ROWTYPE;
PER2 TAB_V2%ROWTYPE;

CURSOR C1 IS
SELECT *
FROM TAB_V;

CURSOR C2 IS
SELECT *
FROM TAB_V2;
BEGIN
DBMS_OUTPUT.PUT_LINE('________________Ежемесячные расходы детей не имеющих льготы:');
OPEN C2;
LOOP
FETCH C2 INTO PER2;
EXIT WHEN C2%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(RPAD((PER2.FAM||' '||PER2.IM||' '||PER2.OTCH||': '),40,' ')||PER2.CENA||'Руб.');
END LOOP;
CLOSE C2;

DBMS_OUTPUT.PUT_LINE('________________Ежемесячные расходы детей имеющих льготы:');
OPEN C1;
LOOP
FETCH C1 INTO PER1;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(RPAD((PER1.FAM||' '||PER1.IM||' '||PER1.OTCH||': '), 40, ' ')||PER1.AKC||'Руб.');
END LOOP;
CLOSE C1;
END;

BEGIN
SAD.OPL;
END;

CREATE VIEW TAB_V2
AS 
SELECT FAM, IM, OTCH, CENA
FROM REB_S, KRUG
WHERE  REB_S.N_M=KRUG.N_M AND REB_S.INNR NOT IN (SELECT INNR FROM LGOTA_REB);

CREATE VIEW TAB_V 
 AS SELECT FAM, IM, OTCH, CENA, (CENA/100)*(100-PROCENT) AKC
FROM REB_S,LGOTA_REB, KRUG, LGOTA
WHERE REB_S.INNR=LGOTA_REB.INNR AND REB_S.N_M=KRUG.N_M AND LGOTA.NL=LGOTA_REB.NL;

SELECT*
FROM RASP;
drop view tab_rasp;
CREATE VIEW TAB_RASP
AS
SELECT V.NAZ " ", NVL(V1.CLM1,'Окно') "09:00", NVL(V2.CLM1,'Окно') "10:45", NVL(V3.CLM1,'Окно') "12:45", NVL(V4.CLM1,'Окно') "14:30", NVL(V5.CLM1,'Окно') "16:15"
FROM (SELECT ND,Nazv AS NAZ FROM DEN_NED
ORDER BY 1) V

LEFT OUTER JOIN
(SELECT K.Nazv AS CLM1,DN.Nazv AS NAZ
FROM RASP R,KRUG K,DEN_NED DN
WHERE R.ND=DN.ND AND R.N_M=K.N_M AND R.NT=1)V1 ON TRIM(V.NAZ)=TRIM(V1.NAZ)--------------------9:00

LEFT OUTER JOIN
(SELECT K.Nazv AS CLM1,DN.Nazv AS NAZ
FROM RASP R,KRUG K,DEN_NED DN
WHERE R.ND=DN.ND AND R.N_M=K.N_M AND R.NT=2)V2 ON TRIM(V.NAZ)=TRIM(V2.NAZ)--------------------10:45

LEFT OUTER JOIN
(SELECT K.Nazv AS CLM1,DN.Nazv AS NAZ
FROM RASP R,KRUG K,DEN_NED DN
WHERE R.ND=DN.ND AND R.N_M=K.N_M AND R.NT=3)V3 ON TRIM(V.NAZ)=TRIM(V3.NAZ)--------------------12:45

LEFT OUTER JOIN
(SELECT K.Nazv AS CLM1,DN.Nazv AS NAZ
FROM RASP R,KRUG K,DEN_NED DN
WHERE R.ND=DN.ND AND R.N_M=K.N_M AND R.NT=4)V4 ON TRIM(V.NAZ)=TRIM(V4.NAZ)--------------------14:30

LEFT OUTER JOIN
(SELECT K.Nazv AS CLM1,DN.Nazv AS NAZ
FROM RASP R,KRUG K,DEN_NED DN
WHERE R.ND=DN.ND AND R.N_M=K.N_M AND R.NT=5)V5 ON TRIM(V.NAZ)=TRIM(V5.NAZ);--------------------16;15

SELECT* FROM TAB_RASP;


--- РАСПИСАНИЕ
CREATE OR REPLACE PROCEDURE RASP_PROC(DEN VARCHAR2)
IS
PER1 INTEGER;
PER2 TAB_RASP%ROWTYPE;

CURSOR C1 IS
SELECT *
FROM TAB_RASP
WHERE UPPER(" ")=UPPER(RASP_PROC.DEN);

BEGIN
SELECT COUNT(*) INTO PER1
FROM TAB_RASP
WHERE UPPER(" ")=UPPER(RASP_PROC.DEN);

IF PER1<0
THEN dbms_output.put_line ('Данные введены не корректно');
ELSE
OPEN C1;
LOOP
FETCH C1 INTO PER2;

EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('Расписание на '||PER2." "||' в 09:00 - '||PER2."09:00"||', в 10:45 - '||PER2."10:45"||', в 12:45 - '||PER2."12:45"||', в 14:30 - '||PER2."14:30"||', в 16:15 - '||PER2."16:15");
END LOOP;
CLOSE C1;
END IF;
END;
EXEC RASP_PROC('Вторник');



SELECT " ","09:00", "10:45", "12:45", "14:30", "16:15"
FROM TAB_RASP
WHERE " "='Понедельник';

CREATE OR REPLACE PACKAGE SAD
IS
PROCEDURE UVOLN(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2);
PROCEDURE ST_PR(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2);
PROCEDURE REG_REB(InnR INTEGER, FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2, VOZR INTEGER);
PROCEDURE REG_REB_KRUG(FAM VARCHAR2,IM VARCHAR2, KRUG VARCHAR2);
PROCEDURE UBR_KR(FAM VARCHAR2,IM VARCHAR2);
PROCEDURE OPL;
PROCEDURE RASP_PROC(DEN VARCHAR2);
end;



CREATE PACKAGE BODY SAD AS
PROCEDURE UVOLN(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM SOTRUD
WHERE UPPER(FAM)=UPPER(UVOLN.FAM) AND UPPER(IM)=UPPER(UVOLN.IM) AND UPPER(OTCH)=UPPER(UVOLN.OTCH);
IF PER1<1 
THEN dbms_output.put_line ('Выбранного вами сотрудника нет в базе или данные введены некорректно');
ELSE DELETE FROM SOTRUD WHERE UPPER(FAM)=UPPER(UVOLN.FAM) AND UPPER(IM)=UPPER(UVOLN.IM) AND UPPER(OTCH)=UPPER(UVOLN.OTCH);
END IF;
END;
PROCEDURE ST_PR(FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM STAGOR
WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH);
IF PER1<1 
THEN dbms_output.put_line ('Стажера с введенным вами данными нет в базе или данные введены некорректно');
ELSE 
INSERT INTO SOTRUD VALUES((SELECT INNS FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
(SELECT N_M FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
ST_PR.FAM, ST_PR.IM,ST_PR.OTCH,
(SELECT DOL FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)),
(SELECT ZP+2000 FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH)));
DELETE FROM STAGOR WHERE UPPER(FAM)=UPPER(ST_PR.FAM) AND UPPER(IM)=UPPER(ST_PR.IM) AND UPPER(OTCH)=UPPER(ST_PR.OTCH);
END IF;
END; 
PROCEDURE REG_REB(InnR INTEGER, FAM VARCHAR2, IM VARCHAR2, OTCH VARCHAR2, VOZR INTEGER)
IS
PER1 INTEGER;
PER2 INTEGER;
N_GR INTEGER;
BEGIN
SELECT COUNT(*) INTO PER1
FROM REB_S
WHERE InnR=REG_REB.InnR;
SELECT (V1.KOLM-V2.ZAN) INTO PER2
FROM (SELECT KOLM
FROM GRUP
WHERE N=(SELECT N 
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO))V1,
(SELECT COUNT(*) ZAN
FROM REB_S
WHERE N=(SELECT N 
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO))V2;
SELECT N INTO N_GR
FROM GRUP
WHERE REG_REB.VOZR=VOZR_C OR REG_REB.VOZR=VOZR_DO;
IF PER1>0
THEN dbms_output.put_line ('Ребенок имеется в базе');
ELSE IF (PER2<=0) 
THEN dbms_output.put_line ('К сожалению в вашей возростной группе больше нет мест');
ELSE INSERT INTO REB_S VALUES(REG_REB.InnR, NULL,N_GR, REG_REB.FAM, REG_REB.IM, REG_REB.OTCH, REG_REB.VOZR);
END IF;
END IF;
END;
PROCEDURE REG_REB_KRUG(FAM VARCHAR2,IM VARCHAR2, KRUG VARCHAR2)
IS
PER1 INTEGER;
PER2 INTEGER;
PER3 INTEGER;
BEGIN
SELECT (V1.KOLM-V2.ZAN) INTO PER1
FROM (SELECT KOLM
FROM KRUG
WHERE N_M=(SELECT N_M 
FROM KRUG
WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)))V1,
(SELECT COUNT(*) ZAN
FROM REB_S
WHERE N_M=(SELECT N_M 
FROM KRUG
WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)))V2;
SELECT N_M INTO PER2
FROM REB_S
WHERE UPPER(FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(IM)=UPPER(REG_REB_KRUG.IM);
SELECT COUNT(*) INTO PER3
FROM REB_S, KRUG_GRUP
WHERE UPPER(REB_S.FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(REB_S.IM)=UPPER(REG_REB_KRUG.IM) AND REB_S.N>=(SELECT N FROM KRUG_GRUP WHERE N_M=(SELECT N_M
                          FROM KRUG
                          WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)));

IF (PER2 IS NOT NULL)
THEN dbms_output.put_line ('Ребенок записан на какой-то кружок выпишите и продолжите');
ELSE IF (PER1<=0) 
THEN dbms_output.put_line ('К сожалению в кружке больше нет мест');
ELSE IF(PER3<=0)
THEN dbms_output.put_line ('Возрастная группа кружка не подходит ребенку');
ELSE UPDATE REB_S SET N_M = (SELECT N_M FROM KRUG WHERE UPPER(NAZV)=UPPER(REG_REB_KRUG.KRUG)) WHERE UPPER(REB_S.FAM)=UPPER(REG_REB_KRUG.FAM) AND UPPER(REB_S.IM)=UPPER(REG_REB_KRUG.IM); 
END IF;
END IF;
END IF;
END;

EXEC REG_REB_KRUG('петров','виктор','бассейн');

select * from reb_s;


PROCEDURE UBR_KR(FAM VARCHAR2,IM VARCHAR2)
IS
PER1 INTEGER;
BEGIN
SELECT N_M INTO PER1
FROM REB_S
WHERE UPPER(FAM)=UPPER(UBR_KR.FAM) AND UPPER(IM)=UPPER(UBR_KR.IM);
IF (PER1 IS NULL)
THEN dbms_output.put_line ('Ребенок не записан ни на один кружок');
ELSE UPDATE REB_S SET N_M = NULL WHERE UPPER(FAM)=UPPER(UBR_KR.FAM) AND UPPER(IM)=UPPER(UBR_KR.IM); 
END IF;
END;
PROCEDURE OPL
IS
PER1 TAB_V%ROWTYPE;
PER2 TAB_V2%ROWTYPE;
CURSOR C1 IS
SELECT *
FROM TAB_V;
CURSOR C2 IS
SELECT *
FROM TAB_V2;
BEGIN
DBMS_OUTPUT.PUT_LINE('___________________Ежемесячные расходы детей не имеющих льготы:');
OPEN C2;
LOOP
FETCH C2 INTO PER2;
EXIT WHEN C2%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(RPAD((PER2.FAM||' '||PER2.IM||' '||PER2.OTCH||': '),40,' ')||PER2.CENA||'Руб.');
END LOOP;
CLOSE C2;
DBMS_OUTPUT.PUT_LINE('___________________Ежемесячные расходы детей имеющих льготы:');
OPEN C1;
LOOP
FETCH C1 INTO PER1;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(RPAD((PER1.FAM||' '||PER1.IM||' '||PER1.OTCH||': '), 40, ' ')||PER1.AKC||'Руб.');
END LOOP;
CLOSE C1;
END;
PROCEDURE RASP_PROC(DEN VARCHAR2)
IS
PER1 INTEGER;
PER2 TAB_RASP%ROWTYPE;
CURSOR C1 IS
SELECT *
FROM TAB_RASP
WHERE UPPER(" ")=UPPER(RASP_PROC.DEN);
BEGIN
SELECT COUNT(*) INTO PER1
FROM TAB_RASP
WHERE UPPER(" ")=UPPER(RASP_PROC.DEN);
IF PER1<0
THEN dbms_output.put_line ('Данные введены не корректно');
ELSE
OPEN C1;
LOOP
FETCH C1 INTO PER2;
EXIT WHEN C1%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('Расписание на '||PER2." "||' в 09:00 - '||PER2."09:00"||', в 10:45 - '||PER2."10:45"||', в 12:45 - '||PER2."12:45"||', в 14:30 - '||PER2."14:30"||', в 16:15 - '||PER2."16:15");
END LOOP;
CLOSE C1;
END IF;
END;
END SAD;
















----------------------------------------------
CREATE OR REPLACE TRIGGER RAS
INSTEAD OF UPDATE ON TAB_RASP
FOR EACH ROW
BEGIN
execute immediate 'UPDATE TAB_RASP SET "09:00"=:NEW."09:00" WHERE " "=:NEW." "';
END;

UPDATE TAB_RASP SET "09:00"='Хор' WHERE " "='Вторник';

grant UPDATE any table to SYSTEM;










DROP TRIGGER RBD_KRUG;
---ПОПЫТКА КАСКАДНОГО УДАЛЕНИЯ
CREATE OR REPLACE TRIGGER RBD_KRUG
BEFORE DELETE ON KRUG
FOR EACH ROW
BEGIN
UPDATE SOTRUD
SET N_M = :NEW.N_M
WHERE N_M = :OLD.N_M; 

UPDATE KRUG_GRUP
SET N_M = :NEW.N_M
WHERE N_M = :OLD.N_M;

UPDATE INF_RAZM
SET N_M = :NEW.N_M
WHERE N_M = :OLD.N_M;

UPDATE RASP
SET N_M = :NEW.N_M
WHERE N_M = :OLD.N_M;

UPDATE REB_S
SET N_M = :NEW.N_M
WHERE N_M = :OLD.N_M;
END;